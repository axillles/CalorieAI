"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Railway —Å –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–æ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
"""
import asyncio
import logging
import threading
import time
import os
from webhook_server import webhook_app
import uvicorn
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from config.settings import settings
from handlers.command_handler import CommandHandler as BotCommandHandler
from handlers.message_handler import MessageHandler as BotMessageHandler
from services.subscription_monitor import SubscriptionMonitor
from telegram import Update

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        logger.info(f"üîë TELEGRAM_BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.TELEGRAM_BOT_TOKEN and settings.TELEGRAM_BOT_TOKEN != 'your_telegram_bot_token_here' else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        logger.info(f"üîë OPENAI_API_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.OPENAI_API_KEY and settings.OPENAI_API_KEY != 'your_openai_api_key_here' else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        logger.info(f"üîë SUPABASE_URL: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.SUPABASE_URL and settings.SUPABASE_URL != 'https://your-project-id.supabase.co' else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        
        if not settings.TELEGRAM_BOT_TOKEN or settings.TELEGRAM_BOT_TOKEN == "your_telegram_bot_token_here":
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        if not settings.OPENAI_API_KEY or settings.OPENAI_API_KEY == "your_openai_api_key_here":
            logger.error("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        command_handler = BotCommandHandler()
        message_handler = BotMessageHandler()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫
        subscription_monitor = SubscriptionMonitor()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ JobQueue
        application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).job_queue(None).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", command_handler.start_command))
        application.add_handler(CommandHandler("help", command_handler.help_command))
        application.add_handler(CommandHandler("stats", command_handler.stats_command))
        application.add_handler(CommandHandler("week", command_handler.week_command))
        
        # Callback-–∫–Ω–æ–ø–∫–∏
        from telegram.ext import CallbackQueryHandler, PreCheckoutQueryHandler
        application.add_handler(CallbackQueryHandler(command_handler.callback_query_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π Telegram Stars
        application.add_handler(PreCheckoutQueryHandler(command_handler.handle_pre_checkout_query))
        application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, command_handler.handle_successful_payment))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.PHOTO, message_handler.handle_photo))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler.handle_text))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫
        subscription_monitor.start_monitoring()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            await application.run_polling(allowed_updates=Update.ALL_TYPES, close_loop=False)
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            subscription_monitor.stop_monitoring()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    def run_bot():
        try:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows –∏ Python 3.13
            try:
                asyncio.run(run_telegram_bot())
            except RuntimeError as e:
                if "event loop is already running" in str(e):
                    # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        loop.run_until_complete(run_telegram_bot())
                    finally:
                        loop.close()
                else:
                    raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ Telegram –±–æ—Ç–∞: {e}")
            logger.info("–í–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Telegram –±–æ—Ç–∞")
    
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å Telegram –±–æ—Ç–æ–º...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –°–ù–ê–ß–ê–õ–ê
    port = int(os.getenv("PORT", 8001))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üîó Health check –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:{port}/health")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    start_telegram_bot()
    
    try:
        uvicorn.run(
            webhook_app, 
            host="0.0.0.0", 
            port=port, 
            log_level="info",
            access_log=True
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
