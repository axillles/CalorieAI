#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Stripe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config.settings import settings
from services.stripe_service import StripeService
from services.subscription_service import SubscriptionService
from services.supabase_service import SupabaseService
from services.subscription_monitor import SubscriptionMonitor
import stripe

class StripeIntegrationValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Stripe"""
    
    def __init__(self):
        self.stripe_service = StripeService()
        self.subscription_service = SubscriptionService()
        self.supabase_service = SupabaseService()
        self.monitor = SubscriptionMonitor()
        
    async def run_full_validation(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã"""
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Stripe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n")
        
        tests = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.validate_configuration),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Stripe", self.validate_stripe_connection),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase", self.validate_supabase_connection),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫", self.validate_subscription_plans),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Checkout Session", self.validate_checkout_session),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤", self.validate_webhook_processing),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫", self.validate_subscription_monitoring),
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_func in tests:
            try:
                print(f"üß™ {test_name}...")
                await test_func()
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù\n")
                passed += 1
            except Exception as e:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù: {str(e)}\n")
                failed += 1
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
        
        if failed == 0:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
    
    async def validate_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        required_settings = [
            ('STRIPE_SECRET_KEY', settings.STRIPE_SECRET_KEY),
            ('STRIPE_WEBHOOK_SECRET', settings.STRIPE_WEBHOOK_SECRET),
            ('STRIPE_PRICE_ID_MONTHLY', settings.STRIPE_PRICE_ID_MONTHLY),
            ('STRIPE_PRICE_ID_YEARLY', settings.STRIPE_PRICE_ID_YEARLY),
            ('SUPABASE_URL', settings.SUPABASE_URL),
            ('SUPABASE_KEY', settings.SUPABASE_KEY),
        ]
        
        for setting_name, setting_value in required_settings:
            if not setting_value or setting_value.startswith('your_'):
                raise Exception(f"{setting_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        print(f"   ‚úì –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def validate_stripe_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Stripe"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Stripe API
            account = stripe.Account.retrieve()
            print(f"   ‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Stripe —É—Å–ø–µ—à–Ω–æ")
            print(f"   ‚úì –ê–∫–∫–∞—É–Ω—Ç: {account.display_name or account.id}")
            print(f"   ‚úì –°—Ç—Ä–∞–Ω–∞: {account.country}")
            print(f"   ‚úì –í–∞–ª—é—Ç–∞: {account.default_currency}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            products = stripe.Product.list(limit=5)
            print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products.data)}")
            
        except stripe.error.StripeError as e:
            raise Exception(f"–û—à–∏–±–∫–∞ Stripe API: {str(e)}")
    
    async def validate_supabase_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
            result = self.supabase_service.supabase.table("users").select("count").execute()
            print(f"   ‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
            tables = ['users', 'payments', 'food_images', 'nutrition_data']
            for table in tables:
                try:
                    self.supabase_service.supabase.table(table).select("*").limit(1).execute()
                    print(f"   ‚úì –¢–∞–±–ª–∏—Ü–∞ {table} –¥–æ—Å—Ç—É–ø–Ω–∞")
                except Exception as e:
                    raise Exception(f"–¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}")
                    
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ Supabase: {str(e)}")
    
    async def validate_subscription_plans(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
        plans = self.stripe_service.get_subscription_plans()
        
        for plan_name, plan_data in plans.items():
            print(f"   ‚úì –ü–ª–∞–Ω {plan_name}:")
            print(f"     - –ù–∞–∑–≤–∞–Ω–∏–µ: {plan_data['name']}")
            print(f"     - –¶–µ–Ω–∞: ${plan_data['price']}")
            print(f"     - –í–∞–ª—é—Ç–∞: {plan_data['currency']}")
            print(f"     - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plan_data['duration_days']} –¥–Ω–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Price –≤ Stripe
            try:
                price = stripe.Price.retrieve(plan_data['stripe_price_id'])
                print(f"     - Stripe Price ID: {price.id} ‚úì")
            except stripe.error.StripeError as e:
                raise Exception(f"Price ID {plan_data['stripe_price_id']} –¥–ª—è –ø–ª–∞–Ω–∞ {plan_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Stripe")
    
    async def validate_checkout_session(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ Checkout Session"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
            test_url = await self.stripe_service.create_checkout_session(
                user_id=999999,  # –¢–µ—Å—Ç–æ–≤—ã–π ID
                plan_type="monthly",
                telegram_user_id=123456789
            )
            
            if test_url and test_url.startswith('https://checkout.stripe.com'):
                print(f"   ‚úì Checkout Session —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
                print(f"   ‚úì URL —Ñ–æ—Ä–º–∞—Ç–∞: {test_url[:50]}...")
            else:
                raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL Checkout Session")
                
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Checkout Session: {str(e)}")
    
    async def validate_webhook_processing(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–µ–±-—Ö—É–∫–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±-—Ö—É–∫–∞
        test_session_data = {
            'id': 'cs_test_123',
            'payment_status': 'paid',
            'subscription': 'sub_test_123',
            'customer': 'cus_test_123',
            'metadata': {
                'user_id': '999999',
                'plan_type': 'monthly',
                'telegram_user_id': '123456789'
            }
        }
        
        test_subscription_data = {
            'id': 'sub_test_123',
            'status': 'active',
            'current_period_start': 1640995200,  # 1 Jan 2022
            'current_period_end': 1643673600     # 1 Feb 2022
        }
        
        print(f"   ‚úì –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±-—Ö—É–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        print(f"   ‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Stripe API")
    
    async def validate_subscription_monitoring(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            print(f"   ‚úì SubscriptionMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            print(f"   ‚úì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            expired_count = await self.subscription_service.check_and_update_expired_subscriptions()
            print(f"   ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–π–¥–µ–Ω–æ: {expired_count})")
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Stripe")
    print("=" * 50)
    
    validator = StripeIntegrationValidator()
    await validator.run_full_validation()
    
    print("\n" + "=" * 50)
    print("üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ–±-—Ö—É–∫ endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ–±-—Ö—É–∫–æ–≤")
    print("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–º–µ–Ω –≤ APP_URL –¥–æ—Å—Ç—É–ø–µ–Ω")

def run_individual_test():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–í–∞–ª–∏–¥–∞—Ç–æ—Ä Stripe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('--test', choices=[
        'config', 'stripe', 'supabase', 'plans', 'checkout', 'webhook', 'monitor'
    ], help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç')
    
    args = parser.parse_args()
    
    validator = StripeIntegrationValidator()
    
    if args.test == 'config':
        asyncio.run(validator.validate_configuration())
    elif args.test == 'stripe':
        asyncio.run(validator.validate_stripe_connection())
    elif args.test == 'supabase':
        asyncio.run(validator.validate_supabase_connection())
    elif args.test == 'plans':
        asyncio.run(validator.validate_subscription_plans())
    elif args.test == 'checkout':
        asyncio.run(validator.validate_checkout_session())
    elif args.test == 'webhook':
        asyncio.run(validator.validate_webhook_processing())
    elif args.test == 'monitor':
        asyncio.run(validator.validate_subscription_monitoring())
    else:
        asyncio.run(main())

if __name__ == "__main__":
    if len(sys.argv) > 1:
        run_individual_test()
    else:
        asyncio.run(main())