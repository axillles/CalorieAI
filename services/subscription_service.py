import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from models.data_models import Subscription, Payment, User
from services.supabase_service import SupabaseService
from config.settings import settings

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π
try:
    from services.stripe_service import StripeService
except ImportError:
    StripeService = None

try:
    from services.paypal_service import PayPalService
except ImportError:
    PayPalService = None

try:
    from services.telegram_stars_service import TelegramStarsService
except ImportError:
    TelegramStarsService = None

try:
    from services.telegram_payments_service import TelegramPaymentsService
except ImportError:
    TelegramPaymentsService = None

logger = logging.getLogger(__name__)

class SubscriptionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã"""
    
    def __init__(self):
        self.supabase_service = SupabaseService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        self.payment_providers = {}
        
        # Telegram Stars
        if TelegramStarsService and "telegram_stars" in settings.ENABLED_PAYMENT_PROVIDERS:
            self.payment_providers["telegram_stars"] = TelegramStarsService()
            
        # Telegram Payments (Redsys via BotFather)
        if TelegramPaymentsService and "telegram_payments" in settings.ENABLED_PAYMENT_PROVIDERS:
            self.payment_providers["telegram_payments"] = TelegramPaymentsService()

        # –£–±–∏—Ä–∞–µ–º PayPal –∏ Stripe –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        self.primary_provider = settings.PRIMARY_PAYMENT_PROVIDER
        if self.primary_provider not in self.payment_providers:
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º telegram_payments, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if "telegram_payments" in self.payment_providers:
                self.primary_provider = "telegram_payments"
            else:
                self.primary_provider = list(self.payment_providers.keys())[0] if self.payment_providers else None
        
        # –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ - –ø–æ–ª—É—á–∞–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if self.primary_provider and self.primary_provider in self.payment_providers:
            self.subscription_plans = self.payment_providers[self.primary_provider].get_subscription_plans()
        else:
            # –ó–∞–ø–∞—Å–Ω—ã–µ –ø–ª–∞–Ω—ã
            self.subscription_plans = {
                "monthly": {
                    "name": "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    "price": 4.99,
                    "currency": "USD",
                    "duration_days": 30,
                    "photos_limit": -1
                },
                "yearly": {
                    "name": "–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    "price": 49.99,
                    "currency": "USD",
                    "duration_days": 365,
                    "photos_limit": -1
                }
            }
    
    async def can_analyze_photo(self, user_id: int) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ"""
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è telegram_id: {user_id}")
            
            user = await self.supabase_service.get_user_by_telegram_id(user_id)
            if not user:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return {"can_analyze": False, "reason": "user_not_found"}
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: db_id={user.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (—Å fallback –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π)
            subscription_status = getattr(user, 'subscription_status', 'free')
            subscription_end = getattr(user, 'subscription_end', None)
            photos_analyzed = getattr(user, 'photos_analyzed', 0)
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: status={subscription_status}, photos_analyzed={photos_analyzed}, limit={settings.FREE_PHOTO_LIMIT}")
            
            if subscription_status == "active":
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
                if subscription_end:
                    try:
                        if isinstance(subscription_end, str):
                            end_date = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
                        else:
                            end_date = subscription_end
                        
                        if end_date < datetime.now():
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ –∏—Å—Ç–µ–∫—à—É—é
                            await self._update_subscription_status(user.id, "expired")
                            return {
                                "can_analyze": False, 
                                "reason": "subscription_expired",
                                "photos_analyzed": photos_analyzed,
                                "subscription_plans": self.subscription_plans
                            }
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                
                return {"can_analyze": True, "reason": "active_subscription"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç (–ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
            if photos_analyzed < settings.FREE_PHOTO_LIMIT:
                logger.info(f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {photos_analyzed}/{settings.FREE_PHOTO_LIMIT}")
                return {"can_analyze": True, "reason": "free_photo"}
            
            logger.info(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ–æ—Ç–æ –∏—Å—á–µ—Ä–ø–∞–Ω: {photos_analyzed}/{settings.FREE_PHOTO_LIMIT}")
            return {
                "can_analyze": False, 
                "reason": "subscription_required",
                "photos_analyzed": photos_analyzed,
                "subscription_plans": self.subscription_plans
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return {"can_analyze": True, "reason": "error_fallback"}
    
    async def increment_photos_analyzed(self, telegram_user_id: int) -> bool:
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–æ telegram_id
            user_result = self.supabase_service.supabase.table("users").select("id, photos_analyzed").eq("telegram_id", telegram_user_id).execute()
            
            if not user_result.data:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            user_data = user_result.data[0]
            current_count = user_data.get("photos_analyzed", 0)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            result = self.supabase_service.supabase.table("users").update({
                "photos_analyzed": current_count + 1
            }).eq("id", user_data["id"]).execute()
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def create_payment_link(self, user_id: int, plan_type: str, telegram_user_id: int, provider: str = None) -> Optional[str]:
        """–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        try:
            if plan_type not in self.subscription_plans:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: {plan_type}")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            if not provider:
                provider = self.primary_provider
            
            if provider not in self.payment_providers:
                logger.error(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
            payment_service = self.payment_providers[provider]
            
            if provider == "stripe":
                payment_url = await payment_service.create_checkout_session(
                    user_id=user_id,
                    plan_type=plan_type,
                    telegram_user_id=telegram_user_id
                )
            elif provider == "paypal":
                payment_url = await payment_service.create_subscription_payment(
                    user_id=user_id,
                    plan_type=plan_type,
                    telegram_user_id=telegram_user_id
                )
            elif provider == "telegram_stars":
                # –î–ª—è Telegram Stars –Ω–µ—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω–≤–æ–π—Å
                return "telegram_stars_invoice_required"
            else:
                logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
                return None
            
            if payment_url:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É {provider} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {plan_type}")
                return payment_url
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É {provider} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É: {e}")
            return None
    
    async def get_user_subscription(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = await self.supabase_service.get_user_by_telegram_id(user_id)
            if not user:
                return None
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å Stripe –ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if user.stripe_subscription_id:
                stripe_info = await self.stripe_service.get_subscription_info(user_id)
                if stripe_info:
                    return stripe_info
            
            # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞—à–µ–π –ë–î
            return {
                "status": user.subscription_status,
                "plan": user.subscription_plan,
                "photos_analyzed": user.photos_analyzed,
                "photos_limit": settings.FREE_PHOTO_LIMIT if user.subscription_status == "free" else -1,
                "subscription_start": user.subscription_start,
                "subscription_end": user.subscription_end
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return None
    
    async def cancel_subscription(self, user_id: int) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            return await self.stripe_service.cancel_subscription(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def _update_subscription_status(self, user_id: int, status: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î"""
        try:
            result = self.supabase_service.supabase.table("users").update({
                "subscription_status": status
            }).eq("id", user_id).execute()
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def check_and_update_expired_subscriptions(self) -> int:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            active_users = self.supabase_service.supabase.table("users").select("*").eq(
                "subscription_status", "active"
            ).execute()
            
            expired_count = 0
            current_time = datetime.now()
            
            for user_data in active_users.data:
                subscription_end = None
                if user_data.get("subscription_end"):
                    subscription_end = datetime.fromisoformat(user_data["subscription_end"].replace('Z', '+00:00'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                if subscription_end and subscription_end < current_time:
                    await self._update_subscription_status(user_data["id"], "expired")
                    expired_count += 1
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['id']}")
            
            return expired_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return 0
    
    def get_subscription_plans(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
        return self.subscription_plans
    
    async def reset_photos_limit_for_new_billing_period(self, user_id: int) -> bool:
        """–°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏)"""
        try:
            result = self.supabase_service.supabase.table("users").update({
                "photos_analyzed": 0
            }).eq("id", user_id).execute()
            
            logger.info(f"–°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ: {e}")
            return False
    
    def get_available_providers(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return list(self.payment_providers.keys())
    
    def get_provider_display_name(self, provider: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        names = {
            "telegram_stars": "‚≠ê Telegram Stars",
            "telegram_payments": "üí≥ Telegram Payments (Redsys)",
        }
        return names.get(provider, provider.title())
    
    def get_payment_service(self, provider: str):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return self.payment_providers.get(provider)
    
    async def _activate_subscription(self, user_id: int, plan_type: str, provider: str, provider_payment_id: str) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from datetime import datetime, timedelta
            
            plan = self.subscription_plans.get(plan_type)
            if not plan:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω: {plan_type}")
                return False
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
            start_date = datetime.now()
            end_date = start_date + timedelta(days=plan['duration_days'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            result = self.supabase_service.supabase.table("users").update({
                "subscription_status": "active",
                "subscription_plan": plan_type,
                "subscription_start": start_date.isoformat(),
                "subscription_end": end_date.isoformat(),
                "payment_provider": provider,
                "provider_payment_id": provider_payment_id,
                "photos_analyzed": 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
            }).eq("id", user_id).execute()
            
            if result.data:
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {plan_type} —á–µ—Ä–µ–∑ {provider}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
