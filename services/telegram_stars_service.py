import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from telegram import LabeledPrice, Update
from telegram.ext import ContextTypes
from config.settings import settings

logger = logging.getLogger(__name__)

class TelegramStarsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Stars –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
    
    def __init__(self):
        # –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –≤ Telegram Stars (1 USD ‚âà 100 Stars –ø—Ä–∏–º–µ—Ä–Ω–æ)
        self.subscription_plans = {
            "monthly": {
                "name": "Monthly KBGU Analysis",
                "price_stars": 500,  # ~$5
                "price_usd": 4.99,
                "duration_days": 30,
                "photos_limit": -1  # -1 = –±–µ–∑–ª–∏–º–∏—Ç
            },
            "yearly": {
                "name": "Yearly KBGU Analysis", 
                "price_stars": 5000,  # ~$50
                "price_usd": 49.99,
                "duration_days": 365,
                "photos_limit": -1
            }
        }
    
    async def create_stars_invoice(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 user_id: int, plan_type: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã Telegram Stars"""
        try:
            plan = self.subscription_plans.get(plan_type)
            if not plan:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: {plan_type}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º LabeledPrice –¥–ª—è Telegram Stars
            prices = [LabeledPrice(
                label=plan["name"],
                amount=plan["price_stars"]  # –í Stars, –Ω–µ –≤ —Ü–µ–Ω—Ç–∞—Ö
            )]
            
            # Payload —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            payload = f"stars_subscription_{user_id}_{plan_type}_{int(datetime.now().timestamp())}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
            await context.bot.send_invoice(
                chat_id=update.effective_chat.id,
                title=f"‚≠ê {plan['name']}",
                description=f"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã –Ω–∞ {plan['duration_days']} –¥–Ω–µ–π\n"
                           f"üí∞ –¶–µ–Ω–∞: {plan['price_stars']} Telegram Stars\n"
                           f"üì∏ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ\n"
                           f"ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤",
                payload=payload,
                provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
                currency="XTR",     # XTR = Telegram Stars
                prices=prices,
                start_parameter=f"stars_subscription_{plan_type}",
                photo_url="https://telegram.org/img/t_logo.png",  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                photo_size=512,
                photo_width=512,
                photo_height=512,
                need_name=False,
                need_phone_number=False,
                need_email=False,
                need_shipping_address=False,
                send_phone_number_to_provider=False,
                send_email_to_provider=False,
                is_flexible=False
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω Telegram Stars –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {plan_type}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram Stars –∏–Ω–≤–æ–π—Å–∞: {e}")
            return False
    
    async def handle_pre_checkout_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å pre-checkout –∑–∞–ø—Ä–æ—Å"""
        try:
            query = update.pre_checkout_query
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
            if not query.invoice_payload.startswith("stars_subscription_"):
                await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")
                return False
            
            # –ü–∞—Ä—Å–∏–º payload
            payload_parts = query.invoice_payload.split("_")
            if len(payload_parts) < 4:
                await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞—Ç–µ–∂–∞")
                return False
            
            user_id = int(payload_parts[2])
            plan_type = payload_parts[3]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω
            if plan_type not in self.subscription_plans:
                await query.answer(ok=False, error_message="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏")
                return False
            
            plan = self.subscription_plans[plan_type]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
            if query.total_amount != plan["price_stars"]:
                await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞")
                return False
            
            # –û–¥–æ–±—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
            await query.answer(ok=True)
            logger.info(f"Pre-checkout –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {plan_type}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
            return False
    
    async def handle_successful_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É Telegram Stars"""
        try:
            payment = update.message.successful_payment
            
            # –ü–∞—Ä—Å–∏–º payload
            payload_parts = payment.invoice_payload.split("_")
            if len(payload_parts) < 4:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload –≤ successful_payment")
                return None
            
            user_id = int(payload_parts[2])
            plan_type = payload_parts[3]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω
            plan = self.subscription_plans.get(plan_type)
            if not plan:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –≤ successful_payment: {plan_type}")
                return None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            return {
                "success": True,
                "payment_id": payment.telegram_payment_charge_id,
                "amount_stars": payment.total_amount,
                "amount_usd": plan["price_usd"],
                "currency": "XTR",
                "user_id": user_id,
                "plan_type": plan_type,
                "telegram_user_id": update.effective_user.id,
                "provider_payment_charge_id": payment.provider_payment_charge_id
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ successful_payment: {e}")
            return None
    
    def get_subscription_plans(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
        return self.subscription_plans
    
    def get_plan_info_message(self, plan_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞–Ω–µ"""
        plan = self.subscription_plans.get(plan_type)
        if not plan:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏"
        
        return (
            f"‚≠ê **{plan['name']}**\n\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price_stars']} Telegram Stars\n"
            f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plan['duration_days']} –¥–Ω–µ–π\n"
            f"üì∏ –§–æ—Ç–æ: –ë–µ–∑–ª–∏–º–∏—Ç\n\n"
            f"‚ÑπÔ∏è **–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**\n"
            f"‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã\n"
            f"‚Ä¢ –ò–ò –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤\n"
            f"‚Ä¢ –î–Ω–µ–≤–Ω–∞—è –∏ –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è\n\n"
            f"üí´ **Telegram Stars** - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å Stars –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram"
        )