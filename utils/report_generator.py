from datetime import datetime, date
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

class ReportGenerator:
    @staticmethod
    def format_daily_report(nutrition_data: Dict[str, float], user_goals: Dict[str, int] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"""
        try:
            calories = nutrition_data.get('calories', 0)
            protein = nutrition_data.get('protein', 0)
            fats = nutrition_data.get('fats', 0)
            carbs = nutrition_data.get('carbs', 0)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–ª–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if not user_goals:
                user_goals = {
                    'calories': 2000,
                    'protein': 150,
                    'fats': 65,
                    'carbs': 250
                }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã
            calories_percent = min((calories / user_goals['calories']) * 100, 100)
            protein_percent = min((protein / user_goals['protein']) * 100, 100)
            fats_percent = min((fats / user_goals['fats']) * 100, 100)
            carbs_percent = min((carbs / user_goals['carbs']) * 100, 100)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
            calories_bar = ReportGenerator._create_progress_bar(calories_percent)
            protein_bar = ReportGenerator._create_progress_bar(protein_percent)
            fats_bar = ReportGenerator._create_progress_bar(fats_percent)
            carbs_bar = ReportGenerator._create_progress_bar(carbs_percent)
            
            report = f"""
üìä *–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –ø–∏—Ç–∞–Ω–∏—è*

üçΩÔ∏è **–ö–∞–ª–æ—Ä–∏–∏:** {calories:.0f} / {user_goals['calories']} –∫–∫–∞–ª ({calories_percent:.1f}%)
{calories_bar}

ü•© **–ë–µ–ª–∫–∏:** {protein:.1f} / {user_goals['protein']}–≥ ({protein_percent:.1f}%)
{protein_bar}

üßà **–ñ–∏—Ä—ã:** {fats:.1f} / {user_goals['fats']}–≥ ({fats_percent:.1f}%)
{fats_bar}

üçû **–£–≥–ª–µ–≤–æ–¥—ã:** {carbs:.1f} / {user_goals['carbs']}–≥ ({carbs_percent:.1f}%)
{carbs_bar}

üìÖ –î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}
"""
            return report.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
    
    @staticmethod
    def format_weekly_report(week_data: Dict[str, float], user_goals: Dict[str, int] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            total_calories = week_data.get('total_calories', 0)
            total_protein = week_data.get('total_protein', 0)
            total_fats = week_data.get('total_fats', 0)
            total_carbs = week_data.get('total_carbs', 0)
            
            avg_calories = week_data.get('average_calories', 0)
            avg_protein = week_data.get('average_protein', 0)
            avg_fats = week_data.get('average_fats', 0)
            avg_carbs = week_data.get('average_carbs', 0)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–ª–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if not user_goals:
                user_goals = {
                    'calories': 2000,
                    'protein': 150,
                    'fats': 65,
                    'carbs': 250
                }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã
            avg_calories_percent = min((avg_calories / user_goals['calories']) * 100, 100)
            avg_protein_percent = min((avg_protein / user_goals['protein']) * 100, 100)
            avg_fats_percent = min((avg_fats / user_goals['fats']) * 100, 100)
            avg_carbs_percent = min((avg_carbs / user_goals['carbs']) * 100, 100)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            avg_calories_bar = ReportGenerator._create_progress_bar(avg_calories_percent)
            avg_protein_bar = ReportGenerator._create_progress_bar(avg_protein_percent)
            avg_fats_bar = ReportGenerator._create_progress_bar(avg_fats_percent)
            avg_carbs_bar = ReportGenerator._create_progress_bar(avg_carbs_percent)
            
            report = f"""
üìà *–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–∏—Ç–∞–Ω–∏—è*

üìä **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:**
üçΩÔ∏è –ö–∞–ª–æ—Ä–∏–∏: {total_calories:.0f} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: {total_protein:.1f}–≥
üßà –ñ–∏—Ä—ã: {total_fats:.1f}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f}–≥

üìÖ **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –¥–µ–Ω—å:**
üçΩÔ∏è **–ö–∞–ª–æ—Ä–∏–∏:** {avg_calories:.0f} / {user_goals['calories']} –∫–∫–∞–ª ({avg_calories_percent:.1f}%)
{avg_calories_bar}

ü•© **–ë–µ–ª–∫–∏:** {avg_protein:.1f} / {user_goals['protein']}–≥ ({avg_protein_percent:.1f}%)
{avg_protein_bar}

üßà **–ñ–∏—Ä—ã:** {avg_fats:.1f} / {user_goals['fats']}–≥ ({avg_fats_percent:.1f}%)
{avg_fats_bar}

üçû **–£–≥–ª–µ–≤–æ–¥—ã:** {avg_carbs:.1f} / {user_goals['carbs']}–≥ ({avg_carbs_percent:.1f}%)
{avg_carbs_bar}

üìÖ –ü–µ—Ä–∏–æ–¥: {date.today().strftime('%d.%m.%Y')}
"""
            return report.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
    
    @staticmethod
    def format_nutrition_result(nutrition_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            food_name = nutrition_data.get('food_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            calories = nutrition_data.get('calories', 0)
            protein = nutrition_data.get('protein', 0)
            fats = nutrition_data.get('fats', 0)
            carbs = nutrition_data.get('carbs', 0)
            confidence = nutrition_data.get('confidence', 0)
            
            confidence_emoji = "üü¢" if confidence > 0.7 else "üü°" if confidence > 0.4 else "üî¥"
            
            result = f"""
üçΩÔ∏è *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!*

üìù **–ë–ª—é–¥–æ:** {food_name}
{confidence_emoji} **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence:.1%}

üìä **–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:**
üçΩÔ∏è –ö–∞–ª–æ—Ä–∏–∏: {calories:.0f} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: {protein:.1f}–≥
üßà –ñ–∏—Ä—ã: {fats:.1f}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f}–≥

‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫!
"""
            return result.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"

    @staticmethod
    def format_water_status(today_ml: int, goal_ml: int) -> str:
        try:
            percent = min((today_ml / goal_ml) * 100, 100) if goal_ml else 0
            bar = ReportGenerator._create_progress_bar(percent)
            return (
                f"üíß –í–æ–¥–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_ml} / {goal_ml} –º–ª ({percent:.0f}%)\n{bar}"
            )
        except Exception:
            return "üíß –í–æ–¥–∞: –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"

    @staticmethod
    def format_weekly_water(bars: Dict[str, int]) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏: { '–ü–Ω': 1500, ... }"""
        try:
            lines = ["üìà –í–æ–¥–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:"]
            max_ml = max(bars.values()) if bars else 0
            scale = max(1, max_ml // 10) if max_ml else 1
            for day, ml in bars.items():
                blocks = ml // scale if scale else 0
                lines.append(f"{day}: " + ("‚ñà" * int(blocks)))
            return "\n".join(lines)
        except Exception:
            return "üìà –í–æ–¥–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: –æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    @staticmethod
    def _create_progress_bar(percentage: float, length: int = 10) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        try:
            filled_length = int((percentage / 100) * length)
            bar = "‚ñà" * filled_length + "‚ñë" * (length - filled_length)
            return bar
        except Exception:
            return "‚ñë" * length
    
    @staticmethod
    def get_welcome_message() -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ë–ñ–£ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ —Å–æ—Å—Ç–∞–≤.

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/week - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
/help - –°–ø—Ä–∞–≤–∫–∞

üì∏ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∞—à—É –µ–¥—É
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–Ω–µ
3. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ö–ë–ñ–£
4. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã! üçΩÔ∏è
"""
    
    @staticmethod
    def get_help_message() -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏"""
        return """
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

ü§ñ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –µ–¥—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
‚Ä¢ –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è

üì∏ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:**
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WEBP
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –µ–¥—É –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏

üìä **–ö–æ–º–∞–Ω–¥—ã:**
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/week - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:**
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –µ–¥—É —Å–≤–µ—Ä—Ö—É
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –≤—Å—é –ø–æ—Ä—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö —Å–Ω–∏–º–∫–æ–≤

‚ùì **–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
"""
