from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from services.supabase_service import SupabaseService
from services.openai_service import OpenAIService, OpenAIQuotaError
from services.g4f_service import G4FService
from services.subscription_service import SubscriptionService
from config.settings import settings
from utils.report_generator import ReportGenerator
from models.data_models import User, FoodImage, NutritionData, DailyReport
from datetime import datetime, date
import logging
import os

logger = logging.getLogger(__name__)

class MessageHandler:
    def __init__(self):
        self.supabase_service = SupabaseService()
        self.openai_service = OpenAIService()
        self.g4f_service = G4FService() if settings.ENABLE_G4F_FALLBACK else None
        self.subscription_service = SubscriptionService()
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            user = update.effective_user
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            db_user = await self.supabase_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
            subscription_check = await self.subscription_service.can_analyze_photo(db_user.id)
            
            if not subscription_check["can_analyze"]:
                if subscription_check["reason"] == "subscription_required":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
                    plans = subscription_check["subscription_plans"]
                    keyboard = [
                        [InlineKeyboardButton(f"üí≥ {plans['monthly']['name']} - ${plans['monthly']['price']}", 
                                            callback_data="subscribe_monthly")],
                        [InlineKeyboardButton(f"üí≥ {plans['yearly']['name']} - ${plans['yearly']['price']}", 
                                            callback_data="subscribe_yearly")],
                        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="subscription_stats")]
                    ]
                    
                    message = (
                        f"‚ö†Ô∏è *–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ–æ—Ç–æ –∏—Å—á–µ—Ä–ø–∞–Ω!*\n\n"
                        f"–í—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏: {subscription_check['photos_analyzed']} —Ñ–æ—Ç–æ\n\n"
                        f"üí° *–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                        f"‚Ä¢ –ú–µ—Å—è—á–Ω–∞—è: ${plans['monthly']['price']} - –±–µ–∑–ª–∏–º–∏—Ç —Ñ–æ—Ç–æ\n"
                        f"‚Ä¢ –ì–æ–¥–æ–≤–∞—è: ${plans['yearly']['price']} - –±–µ–∑–ª–∏–º–∏—Ç —Ñ–æ—Ç–æ (—ç–∫–æ–Ω–æ–º–∏—è 17%)\n\n"
                        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ!"
                    )
                    
                    await update.message.reply_text(message, parse_mode='Markdown', 
                                                 reply_markup=InlineKeyboardMarkup(keyboard))
                    return
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file = await context.bot.get_file(photo.file_id)
            image_bytes = await file.download_as_bytearray()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Supabase Storage (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ñ–∞–π–ª–∞
            image_url = file.file_path
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            food_image = FoodImage(
                user_id=db_user.id,
                image_url=image_url,
                status="processing"
            )
            created_image = await self.supabase_service.create_food_image(food_image)
            
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
                nutrition_analysis = self.openai_service.analyze_food_image(image_bytes)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤–∞—Ö
                nutrition_data = NutritionData(
                    food_image_id=created_image.id,
                    calories=nutrition_analysis.calories,
                    protein=nutrition_analysis.protein,
                    fats=nutrition_analysis.fats,
                    carbs=nutrition_analysis.carbs,
                    food_name=nutrition_analysis.food_name,
                    confidence=nutrition_analysis.confidence
                )
                
                await self.supabase_service.create_nutrition_data(nutrition_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                await self.supabase_service.update_food_image_status(created_image.id, "processed")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
                await self._update_daily_report(db_user.id)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_message = ReportGenerator.format_nutrition_result({
                    'food_name': nutrition_analysis.food_name,
                    'calories': nutrition_analysis.calories,
                    'protein': nutrition_analysis.protein,
                    'fats': nutrition_analysis.fats,
                    'carbs': nutrition_analysis.carbs,
                    'confidence': nutrition_analysis.confidence
                })
                
                # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
                keyboard = [
                    [InlineKeyboardButton(text="‚ûï –í–æ–¥–∞ +250–º–ª", callback_data="water_add_250")],
                    [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="open_menu")]
                ]
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
                await self.subscription_service.increment_photos_analyzed(db_user.id)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await processing_msg.delete()
                await update.message.reply_text(result_message, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
                
            except OpenAIQuotaError:
                logger.error("–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω: –∏—Å—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI")
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ñ–æ–ª–±—ç–∫ g4f ‚Äî –ø—Ä–æ–±—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ URL
                if self.g4f_service:
                    fallback_result = self.g4f_service.analyze_food_image_url(image_url)
                    if fallback_result:
                        nutrition_data = NutritionData(
                            food_image_id=created_image.id,
                            calories=fallback_result.calories,
                            protein=fallback_result.protein,
                            fats=fallback_result.fats,
                            carbs=fallback_result.carbs,
                            food_name=fallback_result.food_name,
                            confidence=fallback_result.confidence
                        )
                        await self.supabase_service.create_nutrition_data(nutrition_data)
                        await self.supabase_service.update_food_image_status(created_image.id, "processed")
                        await self._update_daily_report(db_user.id)
                        result_message = ReportGenerator.format_nutrition_result({
                            'food_name': fallback_result.food_name,
                            'calories': fallback_result.calories,
                            'protein': fallback_result.protein,
                            'fats': fallback_result.fats,
                            'carbs': fallback_result.carbs,
                            'confidence': fallback_result.confidence
                        })
                        keyboard = [
                            [InlineKeyboardButton(text="‚ûï –í–æ–¥–∞ +250–º–ª", callback_data="water_add_250")],
                            [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="open_menu")]
                        ]
                        await processing_msg.delete()
                        await update.message.reply_text(result_message, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
                        return
                await self.supabase_service.update_food_image_status(created_image.id, "error")
                await processing_msg.delete()
                await update.message.reply_text("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∏–ª–ª–∏–Ω–≥ API.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await self.supabase_service.update_food_image_status(created_image.id, "error")
                await processing_msg.delete()
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = update.message.text
            
            if text.startswith('/'):
                # –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ command_handler
                return
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await update.message.reply_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£!\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å\n"
                "/week - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _update_daily_report(self, user_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            nutrition_data = await self.supabase_service.get_user_nutrition_today(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
            daily_report = DailyReport(
                user_id=user_id,
                date=date.today(),
                total_calories=nutrition_data['calories'],
                total_protein=nutrition_data['protein'],
                total_fats=nutrition_data['fats'],
                total_carbs=nutrition_data['carbs']
            )
            
            await self.supabase_service.create_or_update_daily_report(daily_report)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
