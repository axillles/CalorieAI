from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from services.supabase_service import SupabaseService
from services.subscription_service import SubscriptionService
from utils.report_generator import ReportGenerator
from models.data_models import User
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class CommandHandler:
    def __init__(self):
        self.supabase_service = SupabaseService()
        self.subscription_service = SubscriptionService()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
            existing_user = await self.supabase_service.get_user_by_telegram_id(user.id)
            
            if not existing_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(
                    telegram_id=user.id,
                    username=user.username
                )
                await self.supabase_service.create_user(new_user)
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
            
            welcome_message = ReportGenerator.get_welcome_message()
            keyboard = [
                [InlineKeyboardButton(text="‚ûï –í–æ–¥–∞ +250–º–ª", callback_data="water_add_250")],
                [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="open_menu")]
            ]
            await update.message.reply_text(welcome_message, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_message = ReportGenerator.get_help_message()
            await update.message.reply_text(help_message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ help: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def callback_query_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫"""
        try:
            logger.info("üîç Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            query = update.callback_query
            user = update.effective_user
            logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}, callback_data: {query.data}")
            
            # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
            await query.answer()
            logger.info("‚úÖ query.answer() –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            logger.info("üîç –ü–æ–ª—É—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î...")
            db_user = await self.supabase_service.get_user_by_telegram_id(user.id)
            if not db_user:
                logger.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {db_user.id}")

            data = query.data
            logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            if data == "water_add_250":
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥—É
                logger.info("üíß –î–æ–±–∞–≤–ª—è—é –≤–æ–¥—É...")
                await self.supabase_service.add_water_intake(db_user.id, 250)
                logger.info("‚úÖ –í–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î")
                
                water_today = await self.supabase_service.get_water_today(db_user.id)
                logger.info(f"üìä –í–æ–¥–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {water_today}–º–ª")
                
                text = ReportGenerator.format_water_status(water_today, db_user.daily_water_goal_ml)
                logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –≤–æ–¥—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
                
                keyboard = [
                    [InlineKeyboardButton(text="‚ûï –í–æ–¥–∞ +250–º–ª", callback_data="water_add_250")],
                    [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="open_menu")]
                ]
                logger.info("üîò –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
                
                await query.edit_message_text(
                    text=f"üíß –í–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n{text}", 
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                return

            if data == "open_menu":
                # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                logger.info("üìã –û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
                keyboard = [
                    [InlineKeyboardButton(text="üìä –î–µ–Ω—å: –∫–∞–ª–æ—Ä–∏–∏/–≤–æ–¥–∞", callback_data="menu_day")],
                    [InlineKeyboardButton(text="üìà –ù–µ–¥–µ–ª—è: –≥—Ä–∞—Ñ–∏–∫", callback_data="menu_week")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—ã", callback_data="menu_settings_water")],
                ]
                logger.info("üîò –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ")
                await query.edit_message_text(
                    text="üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", 
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                logger.info("‚úÖ –ú–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
                return

            if data == "menu_day":
                # –î–µ–Ω—å: –∫–∞–ª–æ—Ä–∏–∏ + –≤–æ–¥–∞
                nutrition_data = await self.supabase_service.get_user_nutrition_today(db_user.id)
                user_goals = {
                    'calories': db_user.daily_calories_goal,
                    'protein': db_user.daily_protein_goal,
                    'fats': db_user.daily_fats_goal,
                    'carbs': db_user.daily_carbs_goal
                }
                report = ReportGenerator.format_daily_report(nutrition_data, user_goals)
                water_today = await self.supabase_service.get_water_today(db_user.id)
                water_text = ReportGenerator.format_water_status(water_today, db_user.daily_water_goal_ml)
                keyboard = [[InlineKeyboardButton(text="‚ûï –í–æ–¥–∞ +250–º–ª", callback_data="water_add_250")], [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="open_menu")]]
                await query.edit_message_text(text=f"{report}\n\n{water_text}", parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
                return

            if data == "menu_week":
                week_data = await self.supabase_service.get_user_nutrition_week(db_user.id)
                user_goals = {
                    'calories': db_user.daily_calories_goal,
                    'protein': db_user.daily_protein_goal,
                    'fats': db_user.daily_fats_goal,
                    'carbs': db_user.daily_carbs_goal
                }
                report = ReportGenerator.format_weekly_report(week_data, user_goals)
                water_week = await self.supabase_service.get_water_week(db_user.id)
                from datetime import date, timedelta
                days = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
                start = date.today() - timedelta(days=6)
                bars = {}
                for i in range(7):
                    d = start + timedelta(days=i)
                    key = d.isoformat()
                    bars[days[i]] = water_week.get(key, 0)
                water_graph = ReportGenerator.format_weekly_water(bars)
                keyboard = [[InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="open_menu")]]
                await query.edit_message_text(text=f"{report}\n\n{water_graph}", parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
                return

            if data == "menu_settings_water":
                keyboard = [
                    [InlineKeyboardButton(text="1500–º–ª", callback_data="set_water_1500"), 
                     InlineKeyboardButton(text="2000–º–ª", callback_data="set_water_2000")],
                    [InlineKeyboardButton(text="2500–º–ª", callback_data="set_water_2500"), 
                     InlineKeyboardButton(text="3000–º–ª", callback_data="set_water_3000")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="open_menu")]
                ]
                await query.edit_message_text(
                    text="‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É:", 
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return

            if data.startswith("set_water_"):
                goal = int(data.split("_")[-1])
                await self.supabase_service.set_user_water_goal(db_user.id, goal)
                keyboard = [[InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="open_menu")]]
                await query.edit_message_text(
                    text=f"‚úÖ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: *{goal} –º–ª*", 
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ - –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if data == "choose_monthly":
                await self._show_provider_selection(query, db_user, "monthly")
                return
                
            if data == "choose_yearly":
                await self._show_provider_selection(query, db_user, "yearly")
                return
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            if data.startswith("subscribe_"):
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è telegram_stars –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
                parts = data.split("_")
                if len(parts) >= 3:  # subscribe_monthly_provider
                    plan_type = parts[1]
                    provider = "_".join(parts[2:])
                else:
                    return
                
                await self._handle_subscription_request(query, context, db_user, plan_type, provider)
                return

            if data.startswith("crypto_paid_"):
                plan_type = data.split("_")[-1]
                await self._handle_crypto_paid(query, db_user, plan_type)
                return
                
            if data == "subscription_stats":
                await self._show_subscription_stats(query, db_user)
                return
                
            if data == "cancel_subscription":
                await self._handle_subscription_cancellation(query, db_user)
                return
                
            if data == "confirm_cancel_subscription":
                # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Stripe
                success = await self.subscription_service.cancel_subscription(db_user.telegram_id)
                if success:
                    message = (
                        f"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"
                        f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.\n"
                        f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."
                    )
                else:
                    message = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription_stats")]]
                await query.edit_message_text(
                    text=message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ callback_query: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass

    async def _show_provider_selection(self, query, db_user, plan_type: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ)."""
        try:
            plans = self.subscription_service.get_subscription_plans()
            plan = plans.get(plan_type)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            available_providers = ["crypto"]
            
            if not plan:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏")
                return
            
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫—Ä–∏–ø—Ç–æ–æ–ø–ª–∞—Ç—ã
            provider = "crypto"
            provider_name = self.subscription_service.get_provider_display_name(provider)
            callback_data = f"subscribe_{plan_type}_{provider}"
            keyboard.append([InlineKeyboardButton(provider_name, callback_data=callback_data)])
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription_stats")])
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider_descriptions = "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫ ‚Äî –ø–µ—Ä–µ–≤–æ–¥ TON –∏–ª–∏ USDT (TRC20)\n"
            
            plan_name = "–ú–µ—Å—è—á–Ω–∞—è" if plan_type == "monthly" else "–ì–æ–¥–æ–≤–∞—è"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å fallback –∑–Ω–∞—á–µ–Ω–∏–µ–º
            plan_price = plan.get('price', 4.99 if plan_type == 'monthly' else 49.99)
            plan_currency = plan.get('currency', 'USD')
            plan_duration = plan.get('duration_days', 30 if plan_type == 'monthly' else 365)
            
            message = (
                f"üí≥ *{plan_name} –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${plan_price} {plan_currency}\n"
                f"üìÖ –õ–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plan_duration} –¥–Ω–µ–π\n"
                f"üì∏ –§–æ—Ç–æ: –ë–µ–∑–ª–∏–º–∏—Ç\n\n"
                f"üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*\n\n"
                f"{provider_descriptions}"
            )
            
            await query.edit_message_text(
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã")

    async def _handle_subscription_request(self, query, context: ContextTypes.DEFAULT_TYPE, db_user, plan_type: str, provider: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        try:
            plans = self.subscription_service.get_subscription_plans()
            plan = plans.get(plan_type)
            
            if not plan:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            if not provider:
                provider = self.subscription_service.primary_provider
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞
            loading_message = await query.edit_message_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É...")
            
            if provider == "crypto":
                crypto_service = self.subscription_service.get_payment_service("crypto")
                instructions = crypto_service.get_payment_instructions(plan_type)
                if not instructions:
                    await query.edit_message_text("‚ùå –ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤ .env")
                    return

                keyboard = [
                    [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"crypto_paid_{plan_type}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", callback_data="subscription_stats")]
                ]
                await query.edit_message_text(
                    text=instructions,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return
            
            # –ü—Ä–æ—á–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
            await query.edit_message_text("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

    async def _handle_crypto_paid(self, query, db_user, plan_type: str):
        try:
            crypto_service = self.subscription_service.get_payment_service("crypto")
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å TX-—Ö–µ—à –æ—Ç–¥–µ–ª—å–Ω–æ)
            success = await crypto_service.activate_after_user_confirm(db_user.id, plan_type)
            if success:
                keyboard = [
                    [InlineKeyboardButton("üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="open_menu")],
                    [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="subscription_stats")],
                ]
                await query.edit_message_text(
                    text=(
                        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫.\n"
                        "–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–ª–∞—Ç–µ–∂ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    ),
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"Crypto paid error: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã")
    
    async def _handle_telegram_stars_payment(self, query, context: ContextTypes.DEFAULT_TYPE, db_user, plan_type: str, plan: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Telegram Stars
            stars_service = self.subscription_service.get_payment_service("telegram_stars")
            if not stars_service:
                await query.edit_message_text("‚ùå Telegram Stars –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
            stars_plans = stars_service.get_subscription_plans()
            stars_plan = stars_plans.get(plan_type, {})
            
            if not stars_plan:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω Telegram Stars")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ bot API
            from telegram import LabeledPrice
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
            stars_name = stars_plan.get('name', '–ü–æ–¥–ø–∏—Å–∫–∞ Telegram Stars')
            stars_price = stars_plan.get('price_stars', 100 if plan_type == 'monthly' else 1000)
            stars_duration = stars_plan.get('duration_days', 30 if plan_type == 'monthly' else 365)
            
            prices = [LabeledPrice(
                label=stars_name,
                amount=stars_price
            )]
            
            payload = f"stars_subscription_{db_user.id}_{plan_type}_{int(datetime.now().timestamp())}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –Ω–∞–ø—Ä—è–º—É—é
            await context.bot.send_invoice(
                chat_id=query.message.chat_id,
                title=f"‚≠ê {stars_name}",
                description=f"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã –Ω–∞ {stars_duration} –¥–Ω–µ–π\n"
                           f"üí∞ –¶–µ–Ω–∞: {stars_price} Telegram Stars\n"
                           f"üì∏ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ\n"
                           f"ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤",
                payload=payload,
                provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
                currency="XTR",     # XTR = Telegram Stars
                prices=prices,
                start_parameter=f"stars_subscription_{plan_type}",
                photo_url="https://telegram.org/img/t_logo.png",
                photo_size=512,
                photo_width=512,
                photo_height=512,
                need_name=False,
                need_phone_number=False,
                need_email=False,
                need_shipping_address=False,
                send_phone_number_to_provider=False,
                send_email_to_provider=False,
                is_flexible=False
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", callback_data="subscription_stats")]
            ]
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Telegram Stars –ø–ª–∞–Ω–∞
            stars_name = stars_plan.get('name', '–ü–æ–¥–ø–∏—Å–∫–∞ Telegram Stars')
            stars_price = stars_plan.get('price_stars', 100 if plan_type == 'monthly' else 1000)
            stars_duration = stars_plan.get('duration_days', 30 if plan_type == 'monthly' else 365)
            
            message = (
                f"‚≠ê *{stars_name} - Telegram Stars*\n\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {stars_price} ‚≠ê Stars\n"
                f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stars_duration} –¥–Ω–µ–π\n"
                f"üì∏ –§–æ—Ç–æ: –ë–µ–∑–ª–∏–º–∏—Ç\n\n"
                f"‚ÑπÔ∏è *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars:*\n"
                f"1. –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç\n"
                f"2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –≤ –∏–Ω–≤–æ–π—Å–µ\n"
                f"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É Stars\n"
                f"4. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
                f"‚≠ê *Telegram Stars:* –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram\n"
                f"üîÑ *–ü–æ–¥–ø–∏—Å–∫–∞:* –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ {stars_duration} –¥–Ω–µ–π"
            )
            
            await query.edit_message_text(
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω Telegram Stars –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user.id}: {plan_type}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram Stars: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã")
    
    async def handle_pre_checkout_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–ª–∞—Ç—ã Telegram Stars –∏ Telegram Payments"""
        try:
            query = update.pre_checkout_query

            payload = query.invoice_payload or ""

            if payload.startswith("stars_"):
                stars_service = self.subscription_service.get_payment_service("telegram_stars")
                if not stars_service:
                    await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞: Telegram Stars –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                is_valid = await stars_service.handle_pre_checkout_query(query)
                if is_valid:
                    await query.answer(ok=True)
                    logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ: {query.id}")
                else:
                    await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {query.id}")
                return

            if payload.startswith("tgpay_"):
                tgpay_service = self.subscription_service.get_payment_service("telegram_payments")
                if not tgpay_service:
                    await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞: Telegram Payments –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                result = await tgpay_service.handle_pre_checkout(payload, query.total_amount, query.currency)
                if result:
                    await query.answer(ok=True)
                    logger.info(f"Pre-checkout OK (Telegram Payments): {query.id}")
                else:
                    await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
                    logger.error(f"Pre-checkout failed (Telegram Payments): {query.id}")
                return

            await query.answer(ok=False, error_message="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            try:
                await update.pre_checkout_query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            except:
                pass
    
    async def handle_successful_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã Telegram Stars –∏ Telegram Payments"""
        try:
            payment = update.message.successful_payment
            user = update.effective_user
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {payment.telegram_payment_charge_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            db_user = await self.supabase_service.get_user_by_telegram_id(user.id)
            if not db_user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            payload = payment.invoice_payload or ""

            # Telegram Payments success
            if payload.startswith("tgpay_"):
                tgpay_service = self.subscription_service.get_payment_service("telegram_payments")
                if not tgpay_service:
                    logger.error("Telegram Payments —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
                    return
                activated = await tgpay_service.activate_after_success(
                    payload=payload,
                    telegram_payment_charge_id=payment.telegram_payment_charge_id,
                    provider_payment_charge_id=payment.provider_payment_charge_id,
                )
                if activated:
                    keyboard = [
                        [InlineKeyboardButton("üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="open_menu")],
                        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="subscription_stats")],
                    ]
                    await update.message.reply_text(
                        "‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
                        f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {getattr(settings, 'PAYMENT_PROVIDER_NAME', 'Telegram Payments')}\n"
                        "üì∏ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ!\n\n"
                        "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                        "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è",
                        parse_mode='Markdown',
                        reply_markup=InlineKeyboardMarkup(keyboard),
                    )
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (Telegram Payments) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (Telegram Payments) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                return

            # Telegram Stars success
            if payload.startswith("stars_"):
                stars_service = self.subscription_service.get_payment_service("telegram_stars")
                if not stars_service:
                    logger.error("Telegram Stars —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
                    return
                success = await stars_service.handle_successful_payment(update=update, context=context)
                if success:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    keyboard = [
                        [InlineKeyboardButton("üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="open_menu")],
                        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="subscription_stats")]
                    ]
                    
                    await update.message.reply_text(
                        f"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
                        f"‚≠ê –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars: {payment.total_amount} Stars\n"
                        f"üì∏ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ!\n\n"
                        f"üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                        f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è",
                        parse_mode='Markdown',
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                return

            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
            try:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
            except:
                pass

    async def _show_subscription_stats(self, query, db_user):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            subscription_info = await self.subscription_service.get_user_subscription(db_user.telegram_id)
            
            if not subscription_info:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ")
                return
            
            status = subscription_info.get("status", "free")
            plan = subscription_info.get("plan")
            photos_analyzed = subscription_info.get("photos_analyzed", 0)
            subscription_end = subscription_info.get("current_period_end") or subscription_info.get("subscription_end")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if status == "active":
                status_emoji = "‚úÖ"
                status_text = "–ê–∫—Ç–∏–≤–Ω–∞—è"
                plan_text = f"\nüìú –ü–ª–∞–Ω: {plan.title() if plan else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
                
                if subscription_end:
                    from datetime import datetime
                    if isinstance(subscription_end, str):
                        end_date = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
                    else:
                        end_date = subscription_end
                    end_text = f"\nüìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date.strftime('%d.%m.%Y')}"
                else:
                    end_text = ""
                    
                photos_text = f"\nüì∏ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {photos_analyzed} (–±–µ–∑–ª–∏–º–∏—Ç)"
                
                keyboard = [
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_subscription_plans")]
                ]
                
            elif status == "expired":
                status_emoji = "‚ö†Ô∏è"
                status_text = "–ò—Å—Ç–µ–∫–ª–∞"
                plan_text = f"\nüìú –ü–ª–∞–Ω: {plan.title() if plan else '–ù–µ—Ç'}"
                end_text = ""
                photos_text = f"\nüì∏ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {photos_analyzed}/1 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
                
                keyboard = [
                    [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_subscription_plans")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_subscription_plans")]
                ]
                
            else:  # free
                status_emoji = "üÜì"
                status_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
                plan_text = ""
                end_text = ""
                photos_text = f"\nüì∏ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {photos_analyzed}/1 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
                
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_subscription_plans")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_subscription_plans")]
                ]
            
            message = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
                f"{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}{plan_text}{end_text}{photos_text}\n\n"
                f"‚ÑπÔ∏è *–û –ø–æ–¥–ø–∏—Å–∫–µ:*\n"
                f"‚Ä¢ –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
                f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ - –±–µ–∑–ª–∏–º–∏—Ç —Ñ–æ—Ç–æ\n"
                f"‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ\n"
                f"‚Ä¢ –û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
            )
            
            await query.edit_message_text(
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def _handle_subscription_cancellation(self, query, db_user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel_subscription")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="subscription_stats")]
            ]
            
            message = (
                f"‚ö†Ô∏è *–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n\n"
                f"‚ÑπÔ∏è *–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:*\n"
                f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n"
                f"‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤–µ—Ä–Ω–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º (1 —Ñ–æ—Ç–æ)"
            )
            
            await query.edit_message_text(
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å"""
        try:
            user = update.effective_user
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            db_user = await self.supabase_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            nutrition_data = await self.supabase_service.get_user_nutrition_today(db_user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_goals = {
                'calories': db_user.daily_calories_goal,
                'protein': db_user.daily_protein_goal,
                'fats': db_user.daily_fats_goal,
                'carbs': db_user.daily_carbs_goal
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = ReportGenerator.format_daily_report(nutrition_data, user_goals)
            
            # –í–æ–¥–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            water_today = await self.supabase_service.get_water_today(db_user.id)
            water_text = ReportGenerator.format_water_status(water_today, db_user.daily_water_goal_ml)
            keyboard = [
                [InlineKeyboardButton(text="‚ûï –í–æ–¥–∞ +250–º–ª", callback_data="water_add_250")],
                [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="open_menu")]
            ]
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await processing_msg.delete()
            await update.message.reply_text(f"{report}\n\n{water_text}", parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ stats: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def week_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é"""
        try:
            user = update.effective_user
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            db_user = await self.supabase_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("üìà –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_data = await self.supabase_service.get_user_nutrition_week(db_user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_goals = {
                'calories': db_user.daily_calories_goal,
                'protein': db_user.daily_protein_goal,
                'fats': db_user.daily_fats_goal,
                'carbs': db_user.daily_carbs_goal
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = ReportGenerator.format_weekly_report(week_data, user_goals)
            
            # –í–æ–¥–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            water_week = await self.supabase_service.get_water_week(db_user.id)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–Ω–∏ –ü–Ω..–í—Å
            from datetime import date, timedelta
            days = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
            start = date.today() - timedelta(days=6)
            bars = {}
            for i in range(7):
                d = start + timedelta(days=i)
                key = d.isoformat()
                bars[days[i]] = water_week.get(key, 0)
            water_graph = ReportGenerator.format_weekly_water(bars)
            keyboard = [[InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="open_menu")]]
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await processing_msg.delete()
            await update.message.reply_text(f"{report}\n\n{water_graph}", parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ week: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
